#  Template .NET Core build

#  This template allows you to validate your .NET Core package.
#  The workflow allows running tests and code linting on the default branch.

# To run your pipeline on a Windows machine, create a self-hosted Windows runner.
# For instructions on setting up a Windows runner, see https://support.atlassian.com/bitbucket-cloud/docs/set-up-runners-for-windows/

image: mcr.microsoft.com/dotnet/sdk:7.0

pipelines:
  branches:
    develop:
      - step:
          name: Build and publish
          script:
                - apt-get update
                - apt-get install zip -y
                - export SOLUTION_PATH=./CE-API-V2.sln
                - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
                - dotnet restore ${SOLUTION_PATH}
                - dotnet build --no-restore --configuration Release ${SOLUTION_PATH}
                - dotnet test --no-build --configuration Release ${SOLUTION_PATH} -v:n
                - dotnet publish ${SOLUTION_PATH} --no-restore -c Release -o ./publish
                - cd publish
                - zip -r ../publish.zip .
          artifacts:
                - publish.zip
      - step:
          name: Deploy to develop
          deployment: Develop
          script:
                - pipe: atlassian/azure-web-apps-deploy:1.1.0
                  variables:
                    AZURE_APP_ID: $AZURE_APP_ID
                    AZURE_PASSWORD: $AZURE_PASSWORD
                    AZURE_TENANT_ID: $AZURE_TENANT_ID
                    AZURE_RESOURCE_GROUP: 'cardioexplorer-dev'
                    AZURE_APP_NAME: 'cardioexplorer-dev-api'
                    ZIP_FILE: 'publish.zip'
    staging:
      - step:
          name: Build and publish
          script:
                - apt-get update
                - apt-get install zip -y
                - export SOLUTION_PATH=./CE-API-V2.sln
                - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
                - dotnet restore ${SOLUTION_PATH}
                - dotnet build --no-restore --configuration Release ${SOLUTION_PATH}
                - dotnet test --no-build --configuration Release ${SOLUTION_PATH} -v:n
                - dotnet publish ${SOLUTION_PATH} --no-restore -c Release -o ./publish
                - cd publish
                - zip -r ../publish.zip .
          artifacts:
                - publish.zip
      - step:
          name: Deploy to staging
          deployment: Staging
          script:
                - pipe: atlassian/azure-web-apps-deploy:1.1.0
                  variables:
                    AZURE_APP_ID: $AZURE_APP_ID
                    AZURE_PASSWORD: $AZURE_PASSWORD
                    AZURE_TENANT_ID: $AZURE_TENANT_ID
                    AZURE_RESOURCE_GROUP: 'cardioexplorer-staging'
                    AZURE_APP_NAME: 'cardioexplorer-staging-api'
                    ZIP_FILE: 'publish.zip'
    main:
      - step:
          name: Build and publish
          script:
                - apt-get update
                - apt-get install zip -y
                - export SOLUTION_PATH=./CE-API-V2.sln
                - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
                - dotnet restore ${SOLUTION_PATH}
                - dotnet build --no-restore --configuration Release ${SOLUTION_PATH}
                - dotnet test --no-build --configuration Release ${SOLUTION_PATH} -v:n
                - dotnet publish ${SOLUTION_PATH} --no-restore -c Release -o ./publish
                - cd publish
                - zip -r ../publish.zip .
          artifacts:
                - publish.zip
      - step:
          name: Deploy to staging
          deployment: Production
          script:
                - pipe: atlassian/azure-web-apps-deploy:1.1.0
                  variables:
                    AZURE_APP_ID: $AZURE_APP_ID
                    AZURE_PASSWORD: $AZURE_PASSWORD
                    AZURE_TENANT_ID: $AZURE_TENANT_ID
                    AZURE_RESOURCE_GROUP: 'cardioexplorer'
                    AZURE_APP_NAME: 'cardioexplorer-api'
                    ZIP_FILE: 'publish.zip'
  custom:
    deploy-to-prod:
      - variables:
          - name: ResourceGroup
          - name: AppName
      - step:
          name: Build, publish and deploy
          deployment: Production
          script:
                - apt-get update
                - apt-get install zip -y
                - export SOLUTION_PATH=./CE-API-V2.sln
                - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
                - dotnet restore ${SOLUTION_PATH}
                - dotnet build --no-restore --configuration Release ${SOLUTION_PATH}
                - dotnet test --no-build --configuration Release ${SOLUTION_PATH} -v:n
                - dotnet publish ${SOLUTION_PATH} --no-restore -c Release -o ./publish
                - echo $EXAMPLE_VALUE
                - cd publish
                - zip -r ../publish.zip .
                - pipe: atlassian/azure-web-apps-deploy:1.1.0
                  variables:
                    AZURE_APP_ID: $AZURE_APP_ID
                    AZURE_PASSWORD: $AZURE_PASSWORD
                    AZURE_TENANT_ID: $AZURE_TENANT_ID
                    AZURE_RESOURCE_GROUP: $ResourceGroup
                    AZURE_APP_NAME: $AppName
                    ZIP_FILE: '../publish.zip'
  pull-requests:
    "**":
      - parallel:
          - step:
              name: Build and Test
              caches:
                - dotnetcore
              script:
                - export SOLUTION_PATH=./CE-API-V2.sln
                - REPORTS_PATH=./test-reports/build_${BITBUCKET_BUILD_NUMBER}
                - dotnet restore ${SOLUTION_PATH}
                - dotnet build --no-restore --configuration Release ${SOLUTION_PATH}
                - dotnet test --no-build --configuration Release ${SOLUTION_PATH} -v:n
          - step:
              name: Lint the code
              caches:
                - dotnetcore
              script:
                - export SOLUTION_NAME=CE-API-V2
                - export REPORTS_PATH=linter-reports
                - dotnet new tool-manifest
                - dotnet tool install JetBrains.ReSharper.GlobalTools
                - dotnet tool restore
                - dotnet jb inspectcode ${SOLUTION_NAME}.sln --output="${REPORTS_PATH}/jb-${BITBUCKET_BUILD_NUMBER}.xml"
              artifacts:
                - linter-reports/**
